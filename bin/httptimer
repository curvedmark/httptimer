#!/usr/bin/env node
'use strict';

var Q = require('q');
var program = require('commander');
var httptimer = require('../lib/httptimer');
var version = require('../package.json').version;

program
	.version(version, '-v, --version')
	.usage('[options] [urls ...]')
	.option('-p, --parallel <count>', 'Number of urls to test in parallel', parseInt)
	.option('-r, --repeat <times>', 'Number of times to test repeatly, returns averages', parseInt)
	.option('-t, --timeout <ms>', 'Timeout for http request', parseInt)
	.option('-m, --template <str>', 'Replace each url with <str>, %s is the original url')
	.option('-e, --error', 'Display failed urls')
	.option('-i, --interface <str>', 'Local interface to bind')
	.parse(process.argv);

var urls = program.args;
if (!urls.length) {
	urls = readStdin();
}

Q(urls).then(function (urls) {
	httptimer.start(urls, program).then(function (entries) {
		entries.forEach(output);
	});

	function output(entry) {
		var output = entry.url + padding(entry.url) + entry.result;
		console.log(output);
	}

	var maxLength;
	function padding(url) {
		if (maxLength == null) {
			maxLength = urls.reduce(function (maxLength, url) {
				return Math.max(maxLength, url.length);
			}, 0);
		}

		return new Array(maxLength - url.length + 1).join(' ') + '  ';
	}
});

// allow httptimer | head
process.stdout.on('error', function (error) {
	if (error.code === 'EPIPE') {
		process.exit();
	}
});

function readStdin() {
	var deferred = Q.defer();

	var stdin = '';
	process.stdin.resume();
	process.stdin.setEncoding('utf8');
	process.stdin.on('data', function (chunk) {
		stdin += chunk;
	});
	process.stdin.on('end', function () {
		var lines = stdin.trim().split('\n');
		deferred.resolve(lines);
	});

	return deferred.promise;
}